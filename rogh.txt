success membership form with good white theme


<template>
  <div class="min-h-screen bg-gray-50">
    <!-- Header -->
    <header class="bg-blue-600 text-white shadow-md">
      <div class="container mx-auto px-4 py-4">
        <div class="flex items-center">
          <button @click="goBack" class="p-2 hover:bg-blue-500 rounded-full transition-colors mr-4">
            <ChevronLeft class="w-6 h-6" />
          </button>
          <h1 class="text-xl font-bold">SSF Campus Membership Registration</h1>
        </div>
      </div>
    </header>

    <!-- Form Container -->
    <div class="container mx-auto px-4 py-8 max-w-4xl">
      <div class="bg-white rounded-xl shadow-md overflow-hidden">
        <!-- Progress Bar -->
        <div class="bg-gray-100 h-2">
          <div class="bg-green-500 h-2" :style="{ width: `${progress}%` }"></div>
        </div>

        <form @submit.prevent="handleSubmit" class="p-6 md:p-8">
          <h2 class="text-2xl font-bold text-gray-800 mb-6">Membership Application</h2>
          
          <!-- Personal Information -->
          <div class="mb-8">
            <div class="flex items-center gap-3 mb-4">
              <User class="w-5 h-5 text-blue-600" />
              <h3 class="text-lg font-semibold text-gray-800">Personal Information</h3>
            </div>
            
            <div class="grid md:grid-cols-2 gap-6">
              <!-- Full Name -->
              <div>
                <label class="block text-sm font-medium text-gray-700 mb-1">
                  Full Name <span class="text-red-500">*</span>
                </label>
                <input
                  v-model="form.name"
                  type="text"
                  placeholder="Enter your full name"
                  class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 outline-none transition-colors"
                  :class="{ 'border-red-500': errors.name }"
                />
                <p v-if="errors.name" class="mt-1 text-sm text-red-600">{{ errors.name }}</p>
              </div>
              
              <!-- Mobile Number -->
              <div>
                <label class="block text-sm font-medium text-gray-700 mb-1">
                  Mobile Number <span class="text-red-500">*</span>
                </label>
                <div class="relative">
                  <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                    <span class="text-gray-500">+91</span>
                  </div>
                  <input
                    v-model="form.mobile"
                    type="tel"
                    placeholder="10 digit phone number"
                    class="w-full pl-12 px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 outline-none transition-colors"
                    :class="{ 'border-red-500': errors.mobile }"
                    @input="handleMobileInput"
                    maxlength="10"
                  />
                </div>
                <p v-if="errors.mobile" class="mt-1 text-sm text-red-600">{{ errors.mobile }}</p>
                <p v-if="mobileCheckMessage" class="mt-1 text-sm" :class="mobileCheckMessage.class">
                  {{ mobileCheckMessage.text }}
                </p>
              </div>
              
              <!-- Email -->
              <div>
                <label class="block text-sm font-medium text-gray-700 mb-1">
                  Email Address <span class="text-red-500">*</span>
                </label>
                <input
                  v-model="form.email"
                  type="email"
                  placeholder="Enter your email"
                  class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 outline-none transition-colors"
                  :class="{ 'border-red-500': errors.email }"
                />
                <p v-if="errors.email" class="mt-1 text-sm text-red-600">{{ errors.email }}</p>
              </div>
              
              <!-- Date of Birth -->
              <div>
                <label class="block text-sm font-medium text-gray-700 mb-1">
                  Date of Birth <span class="text-red-500">*</span>
                </label>
                <input
                  v-model="form.dob"
                  type="date"
                  class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 outline-none transition-colors"
                  :class="{ 'border-red-500': errors.dob }"
                  max="2005-12-31"
                />
                <p v-if="errors.dob" class="mt-1 text-sm text-red-600">{{ errors.dob }}</p>
              </div>
              
              <!-- Profile Photo -->
              <div class="md:col-span-2">
                <label class="block text-sm font-medium text-gray-700 mb-1">Profile Photo (Optional)</label>
                <div class="flex items-center gap-4">
                  <div class="relative w-20 h-20 bg-gray-100 rounded-full flex items-center justify-center overflow-hidden border-2 border-dashed border-gray-300">
                    <img v-if="profilePreview" :src="profilePreview" alt="Profile" class="w-full h-full object-cover" />
                    <User v-else class="w-8 h-8 text-gray-400" />
                    <button
                      v-if="profilePreview"
                      @click.stop="removePhoto"
                      class="absolute top-0 right-0 bg-red-500 text-white rounded-full p-1 transform translate-x-1 -translate-y-1"
                    >
                      <svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                      </svg>
                    </button>
                  </div>
                  <div>
                    <button
                      type="button"
                      @click="choosePhoto"
                      class="px-4 py-2 border border-gray-300 rounded-lg text-sm font-medium text-gray-700 hover:bg-gray-50 transition-colors mb-2"
                    >
                      Choose Photo
                    </button>
                    <p class="text-xs text-gray-500">JPG or PNG, max 2MB</p>
                  </div>
                  <input
                    ref="photoInput"
                    type="file"
                    accept="image/*"
                    class="hidden"
                    @change="handlePhotoUpload"
                  />
                </div>
              </div>
            </div>
          </div>
          
          <!-- Address Information -->
          <div class="mb-8">
            <div class="flex items-center gap-3 mb-4">
              <MapPin class="w-5 h-5 text-blue-600" />
              <h3 class="text-lg font-semibold text-gray-800">Address Information</h3>
            </div>
            
            <div class="grid md:grid-cols-2 gap-6">
              <!-- District -->
              <div>
                <label class="block text-sm font-medium text-gray-700 mb-1">
                  District <span class="text-red-500">*</span>
                </label>
                <div class="relative">
                  <select 
                    v-model="form.district" 
                    class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 outline-none transition-colors appearance-none pr-10"
                    :class="{ 'border-red-500': errors.district }"
                    @change="handleDistrictChange"
                  >
                    <option value="">Select district</option>
                    <option v-for="district in districts" :key="district" :value="district">
                      {{ district }}
                    </option>
                  </select>
                  <ChevronDown class="absolute right-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-400 pointer-events-none" />
                </div>
                <p v-if="errors.district" class="mt-1 text-sm text-red-600">{{ errors.district }}</p>
              </div>
              
              <!-- Division -->
              <div>
                <label class="block text-sm font-medium text-gray-700 mb-1">
                  Division <span class="text-red-500">*</span>
                </label>
                <div class="relative">
                  <select 
                    v-model="form.division" 
                    class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 outline-none transition-colors appearance-none pr-10"
                    :class="{ 'border-red-500': errors.division }"
                    :disabled="!form.district"
                  >
                    <option value="">Select division</option>
                    <option v-for="division in filteredDivisions" :key="division" :value="division">
                      {{ division }}
                    </option>
                  </select>
                  <ChevronDown class="absolute right-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-400 pointer-events-none" />
                </div>
                <p v-if="errors.division" class="mt-1 text-sm text-red-600">{{ errors.division }}</p>
              </div>
              
              <!-- Sector -->
              <div>
                <label class="block text-sm font-medium text-gray-700 mb-1">
                  Sector <span class="text-red-500">*</span>
                </label>
                <input
                  v-model="form.sector"
                  type="text"
                  placeholder="Enter your sector"
                  class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 outline-none transition-colors"
                  :class="{ 'border-red-500': errors.sector }"
                />
                <p v-if="errors.sector" class="mt-1 text-sm text-red-600">{{ errors.sector }}</p>
              </div>
              
              <!-- Unit -->
              <div>
                <label class="block text-sm font-medium text-gray-700 mb-1">
                  Unit <span class="text-red-500">*</span>
                </label>
                <input
                  v-model="form.unit"
                  type="text"
                  placeholder="Enter your unit"
                  class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 outline-none transition-colors"
                  :class="{ 'border-red-500': errors.unit }"
                />
                <p v-if="errors.unit" class="mt-1 text-sm text-red-600">{{ errors.unit }}</p>
              </div>
            </div>
          </div>
          
          <!-- Educational Information -->
          <div class="mb-8">
            <div class="flex items-center gap-3 mb-4">
              <School class="w-5 h-5 text-blue-600" />
              <h3 class="text-lg font-semibold text-gray-800">Educational Information</h3>
            </div>
            
            <div class="grid md:grid-cols-2 gap-6">
              <!-- School Name -->
              <div class="md:col-span-2">
                <label class="block text-sm font-medium text-gray-700 mb-1">
                  School/College Name <span class="text-red-500">*</span>
                </label>
                <div class="relative">
                  <input
                    v-model="schoolSearch"
                    type="text"
                    placeholder="Search or select school"
                    class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 outline-none transition-colors pr-10"
                    :class="{ 'border-red-500': errors.schoolName }"
                    @input="filterSchools"
                    @focus="showSchoolDropdown = true"
                  />
                  <ChevronDown class="absolute right-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-400 pointer-events-none" />
                  
                  <!-- School Dropdown -->
                  <div 
                    v-if="showSchoolDropdown && filteredSchools.length > 0" 
                    class="absolute z-10 w-full mt-1 bg-white border border-gray-300 rounded-lg shadow-lg max-h-60 overflow-y-auto"
                  >
                    <button
                      v-for="school in filteredSchools"
                      :key="school"
                      type="button"
                      @click="selectSchool(school)"
                      class="w-full px-4 py-2 text-left hover:bg-gray-50 border-b border-gray-100 last:border-b-0 text-sm"
                    >
                      {{ school }}
                    </button>
                  </div>
                </div>
                <p v-if="errors.schoolName" class="mt-1 text-sm text-red-600">{{ errors.schoolName }}</p>
              </div>
              
              <!-- Course Name -->
              <div>
                <label class="block text-sm font-medium text-gray-700 mb-1">
                  Course Name <span class="text-red-500">*</span>
                </label>
                <input
                  v-model="form.courseName"
                  type="text"
                  placeholder="e.g., B.Sc. Computer Science"
                  class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 outline-none transition-colors"
                  :class="{ 'border-red-500': errors.courseName }"
                />
                <p v-if="errors.courseName" class="mt-1 text-sm text-red-600">{{ errors.courseName }}</p>
              </div>
              
              <!-- Year of Study -->
              <div>
                <label class="block text-sm font-medium text-gray-700 mb-1">
                  Year of Study <span class="text-red-500">*</span>
                </label>
                <div class="relative">
                  <select 
                    v-model="form.yearOfStudy" 
                    class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 outline-none transition-colors appearance-none pr-10"
                    :class="{ 'border-red-500': errors.yearOfStudy }"
                  >
                    <option value="">Select year</option>
                    <option v-for="year in yearOptions" :key="year.value" :value="year.value">
                      {{ year.label }}
                    </option>
                  </select>
                  <ChevronDown class="absolute right-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-400 pointer-events-none" />
                </div>
                <p v-if="errors.yearOfStudy" class="mt-1 text-sm text-red-600">{{ errors.yearOfStudy }}</p>
              </div>
            </div>
          </div>
          
          <!-- Terms and Conditions -->
          <div class="mb-8">
            <div class="flex items-start">
              <div class="flex items-center h-5">
                <input
                  id="terms"
                  v-model="form.agreeTerms"
                  type="checkbox"
                  class="w-4 h-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500"
                />
              </div>
              <div class="ml-3">
                <label for="terms" class="text-sm text-gray-700">
                  I agree to the <a href="#" class="text-blue-600 hover:text-blue-800">Terms and Conditions</a> and 
                  <a href="#" class="text-blue-600 hover:text-blue-800">Privacy Policy</a> of SSF.
                  <span class="text-red-500">*</span>
                </label>
                <p v-if="errors.agreeTerms" class="mt-1 text-sm text-red-600">{{ errors.agreeTerms }}</p>
              </div>
            </div>
          </div>
          
          <!-- Submit Button -->
          <div>
            <button
              type="submit"
              :disabled="loading"
              class="w-full bg-blue-600 text-white py-4 px-6 rounded-xl font-semibold text-lg hover:bg-blue-700 transition-all duration-200 disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center gap-2"
            >
              <Loader v-if="loading" class="w-5 h-5 animate-spin" />
              <span>{{ loading ? 'Processing...' : 'Submit Application' }}</span>
              <ArrowRight v-if="!loading" class="w-5 h-5" />
            </button>
          </div>
        </form>
      </div>
    </div>

    <!-- Success Modal -->
    <SuccessModal
  v-if="showSuccess"
  :member-id="memberId"
  :name="form.name"
  :level="form.level || 'MEMBER'"
  :course="form.courseName"
  :mobile="form.mobile"
  :blood-group="form.bloodGroup || ''"
  :address="`${form.unit}, ${form.sector}, ${form.district}, Kerala`"
  :dob="form.dob"
  :validity="validityPeriod"
  :photo-url="profilePreview"
  :qr-code-data="qrCodeData"
  @close="resetForm"
  @download="downloadIDCard"
/>
  </div>
</template>

<script setup>
import { ref, reactive, computed, onMounted, onUnmounted } from 'vue'
import { useRouter } from 'vue-router'
import html2canvas from 'html2canvas'
import { useQRCode } from '../composables/useQRCode'

// Components
import SuccessModal from '../components/SuccessModal.vue'
import MembershipCard from '@/components/MembershipCard.vue'
import QRCodeGenerator from '@/components/QRCodeGenerator.vue'

// Icons
import { 
  ChevronLeft, 
  ChevronDown, 
  User, 
  School, 
  MapPin,
  ArrowRight, 
  Loader 
} from 'lucide-vue-next'

// Data
import { districts, divisionsByDistrict, schools } from '../data/locations'

// Composable
import { useFormValidation } from '../composables/useFormValidation'

const router = useRouter()
const { generateQRCode } = useQRCode()

// State
const loading = ref(false)
const showSuccess = ref(false)
const showSchoolDropdown = ref(false)
const schoolSearch = ref('')
const profilePreview = ref('')
const photoInput = ref(null)
const memberId = ref('')
const qrCodeData = ref('')

// Form
const form = reactive({
  name: '',
  mobile: '',
  email: '',
  dob: '',
  district: '',
  division: '',
  sector: '',
  unit: '',
  schoolName: '',
  courseName: '',
  yearOfStudy: '',
  profilePhoto: null,
  agreeTerms: false
})

// Form validation
const { errors, validateForm, validateMobile } = useFormValidation()

// Year options
const yearOptions = [
  { label: 'First Year', value: '1' },
  { label: 'Second Year', value: '2' },
  { label: 'Third Year', value: '3' },
  { label: 'Fourth Year', value: '4' },
  { label: 'Fifth Year', value: '5' },
]

// Computed properties
const filteredDivisions = computed(() => {
  return form.district ? (divisionsByDistrict[form.district] || []) : []
})

const filteredSchools = computed(() => {
  if (!schoolSearch.value) return schools.slice(0, 5)
  return schools.filter(school => 
    school.toLowerCase().includes(schoolSearch.value.toLowerCase())
  ).slice(0, 10)
})

const progress = computed(() => {
  const totalFields = 10 // Total required fields
  let filledFields = 0
  
  if (form.name) filledFields++
  if (form.mobile && !errors.mobile) filledFields++
  if (form.email && !errors.email) filledFields++
  if (form.dob) filledFields++
  if (form.district) filledFields++
  if (form.division) filledFields++
  if (form.sector) filledFields++
  if (form.unit) filledFields++
  if (form.schoolName) filledFields++
  if (form.courseName) filledFields++
  if (form.yearOfStudy) filledFields++
  
  return Math.round((filledFields / totalFields) * 100)
})

// Methods
const goBack = () => {
  router.push('/')
}

const handleDistrictChange = () => {
  form.division = ''
}

const handleMobileInput = () => {
  form.mobile = form.mobile.replace(/\D/g, '')
  validateMobile(form.mobile)
  
  // Simulate mobile number check (in a real app, this would be an API call)
  if (form.mobile.length === 10) {
    // This would be replaced with actual API call
    setTimeout(() => {
      const isDuplicate = Math.random() < 0.2 // 20% chance of being duplicate for demo
      if (isDuplicate) {
        mobileCheckMessage.value = {
          text: 'This mobile number is already registered',
          class: 'text-red-600'
        }
      } else {
        mobileCheckMessage.value = {
          text: 'Mobile number is available',
          class: 'text-green-600'
        }
      }
    }, 800)
  } else {
    mobileCheckMessage.value = null
  }
}

const choosePhoto = () => {
  photoInput.value?.click()
}

const removePhoto = () => {
  form.profilePhoto = null
  profilePreview.value = ''
  if (photoInput.value) {
    photoInput.value.value = ''
  }
}

const handlePhotoUpload = (event) => {
  const file = event.target.files[0]
  if (file) {
    // Check file size (2MB limit)
    if (file.size > 2 * 1024 * 1024) {
      alert('File size should be less than 2MB')
      return
    }

    // Check file type
    if (!file.type.startsWith('image/')) {
      alert('Please select an image file')
      return
    }

    form.profilePhoto = file
    const reader = new FileReader()
    reader.onload = (e) => {
      profilePreview.value = e.target.result
    }
    reader.readAsDataURL(file)
  }
}

const filterSchools = () => {
  showSchoolDropdown.value = true
}

const selectSchool = (school) => {
  form.schoolName = school
  schoolSearch.value = school
  showSchoolDropdown.value = false
}

const handleSubmit = async () => {
  if (!validateForm(form)) {
    // Scroll to first error
    const firstErrorElement = document.querySelector('.border-red-500')
    if (firstErrorElement) {
      firstErrorElement.scrollIntoView({ behavior: 'smooth', block: 'center' })
      firstErrorElement.focus()
    }
    return
  }
  
  loading.value = true
  
  try {
    // Simulate API call
    await new Promise(resolve => setTimeout(resolve, 1500))
    
    // Generate member ID (format: SSF-YYYY-MM-XXXX)
    const now = new Date()
    const randomNum = Math.floor(1000 + Math.random() * 9000)
    memberId.value = `SSF-${now.getFullYear()}-${(now.getMonth() + 1).toString().padStart(2, '0')}-${randomNum}`
    
    // Generate QR code data (contains member ID and name)
    qrCodeData.value = await generateQRCode(`${memberId.value}|${form.name}`)
    
    // Show success modal
    showSuccess.value = true
    
    // Save to localStorage for backup
    localStorage.setItem('lastSubmission', JSON.stringify({
      ...form,
      memberId: memberId.value,
      submittedAt: new Date().toISOString(),
      profilePhoto: form.profilePhoto ? 'File was uploaded' : null
    }))
    
  } catch (error) {
    console.error('Submission error:', error)
    alert('Failed to submit application. Please try again.')
  } finally {
    loading.value = false
  }
}

// const downloadIDCard = async () => {
//   try {
//     // In a real app, this would generate a proper ID card
//     // For demo, we'll just create a simple card
    
//     const cardElement = document.createElement('div')
//     cardElement.className = 'bg-white p-6 rounded-xl shadow-lg w-80 text-center'
//     cardElement.innerHTML = `
//       <div class="mb-4">
//         <h3 class="text-xl font-bold text-blue-600">SSF Membership ID</h3>
//       </div>
//       <div class="mb-4">
//         <img src="${profilePreview.value || 'https://via.placeholder.com/100'}" alt="Member Photo" class="w-24 h-24 rounded-full mx-auto object-cover border-2 border-blue-200">
//       </div>
//       <div class="mb-2">
//         <p class="font-semibold">${form.name}</p>
//         <p class="text-sm text-gray-600">${memberId.value}</p>
//       </div>
//       <div class="mb-4">
//         <p class="text-sm">${form.schoolName}</p>
//         <p class="text-sm text-gray-600">${form.courseName}, Year ${form.yearOfStudy}</p>
//       </div>
//       <div class="flex justify-center">
//         <img src="${qrCodeData.value}" alt="QR Code" class="w-24 h-24">
//       </div>
//       <div class="mt-4 text-xs text-gray-500">
//         <p>Valid until ${new Date().getFullYear() + 1}-12-31</p>
//       </div>
//     `
    
//     document.body.appendChild(cardElement)
    
//     const canvas = await html2canvas(cardElement)
//     document.body.removeChild(cardElement)
    
//     const link = document.createElement('a')
//     link.download = `SSF-MemberCard-${memberId.value}.png`
//     link.href = canvas.toDataURL('image/png')
//     link.click()
    
//   } catch (error) {
//     console.error('Error generating ID card:', error)
//     alert('Failed to generate ID card. Please try again.')
//   }
// }
const downloadIDCard = async () => {
  try {
    // Create a temporary div to render the membership card
    const tempDiv = document.createElement('div')
    document.body.appendChild(tempDiv)
    
    // Create a component instance
    const { createApp } = await import('vue')
    const app = createApp(MembershipCard, {
      memberId: memberId.value,
      name: form.name,
      photoUrl: profilePreview.value,
      schoolName: form.schoolName,
      courseName: form.courseName,
      yearOfStudy: form.yearOfStudy,
      qrCodeData: qrCodeData.value
    })
    
    // Mount the component
    app.mount(tempDiv)
    
    // Wait for the next tick to ensure rendering is complete
    await new Promise(resolve => setTimeout(resolve, 100))
    
    // Generate the canvas
    const canvas = await html2canvas(tempDiv.firstChild)
    
    // Clean up
    app.unmount()
    document.body.removeChild(tempDiv)
    
    // Download the image
    const link = document.createElement('a')
    link.download = `SSF-MemberCard-${memberId.value}.png`
    link.href = canvas.toDataURL('image/png')
    link.click()
    
  } catch (error) {
    console.error('Error generating ID card:', error)
    alert('Failed to generate ID card. Please try again.')
  }
}

const resetForm = () => {
  // Reset form data
  Object.keys(form).forEach(key => {
    if (key === 'profilePhoto') {
      form[key] = null
    } else if (key === 'agreeTerms') {
      form[key] = false
    } else {
      form[key] = ''
    }
  })
  
  // Reset other state
  Object.keys(errors).forEach(key => errors[key] = '')
  profilePreview.value = ''
  schoolSearch.value = ''
  showSuccess.value = false
  memberId.value = ''
  qrCodeData.value = ''
  
  // Reset file input
  if (photoInput.value) {
    photoInput.value.value = ''
  }
}

const handleClickOutside = (e) => {
  if (!e.target.closest('.relative')) {
    showSchoolDropdown.value = false
  }
}

// Lifecycle hooks
onMounted(() => {
  document.addEventListener('click', handleClickOutside)
  
  // Load saved form data if exists
  const savedData = localStorage.getItem('membershipFormDraft')
  if (savedData) {
    try {
      const parsed = JSON.parse(savedData)
      Object.assign(form, parsed)
      schoolSearch.value = form.schoolName
    } catch (error) {
      console.error('Failed to load saved form data:', error)
    }
  }
})

onUnmounted(() => {
  document.removeEventListener('click', handleClickOutside)
  
  // Save form data as draft
  const hasData = Object.values(form).some(value => 
    value && value !== '' && value !== null && value !== false
  )
  
  if (hasData) {
    const draftData = { ...form }
    delete draftData.profilePhoto // Don't save file object
    localStorage.setItem('membershipFormDraft', JSON.stringify(draftData))
  }
})
</script>


success membership card vue



<template>
  <div class="id-card">
    <div class="id-card-header">
      <div class="logo">
        <img src="@/assets/ssf-logo.jpg" alt="SSF Logo">
      </div>
      <div class="org-info">
        <h2>SUNNI STUDENTS' FEDERATION</h2>
        <p>CAMPUS MEMBERSHIP ID CARD</p>
      </div>
    </div>

    <div class="id-card-body">
      <div class="photo-section">
        <div class="member-photo">
          <img :src="photoUrl || placeholderImage" alt="Member Photo">
        </div>
        <div class="qr-code">
          <img :src="qrCodeData" alt="QR Code">
        </div>
      </div>

      <div class="member-info">
        <div class="info-row">
          <span class="label">Name:</span>
          <span class="value">{{ name }}</span>
        </div>
        <div class="info-row">
          <span class="label">Level:</span>
          <span class="value">{{ level }}</span>
        </div>
        <div class="info-row">
          <span class="label">Course:</span>
          <span class="value">{{ course }}</span>
        </div>
        <div class="info-row">
          <span class="label">Member ID:</span>
          <span class="value">{{ memberId }}</span>
        </div>
        <div class="info-row">
          <span class="label">Mobile:</span>
          <span class="value">{{ mobile }}</span>
        </div>
        <div class="info-row">
          <span class="label">Blood Group:</span>
          <span class="value">{{ bloodGroup }}</span>
        </div>
        <div class="info-row address">
          <span class="label">Address:</span>
          <span class="value">{{ address }}</span>
        </div>
        <div class="info-row">
          <span class="label">DOB:</span>
          <span class="value">{{ dob }}</span>
        </div>
        <div class="info-row">
          <span class="label">Valid Until:</span>
          <span class="value">{{ validity }}</span>
        </div>
      </div>
    </div>

    <div class="id-card-footer">
      <div class="contact-info">
        <p>SSF Central Office, Kerala, India</p>
        <p>Contact: +91 1234567890 | Email: contact@ssf.org</p>
      </div>
    </div>
  </div>
</template>

<script setup>
import { ref } from 'vue'
import placeholderImage from '@/assets/default-profile.png'

const props = defineProps({
  name: {
    type: String,
    required: true
  },
  level: {
    type: String,
    default: 'MEMBER'
  },
  course: {
    type: String,
    required: true
  },
  memberId: {
    type: String,
    required: true
  },
  mobile: {
    type: String,
    required: true
  },
  bloodGroup: {
    type: String,
    default: ''
  },
  address: {
    type: String,
    required: true
  },
  dob: {
    type: String,
    required: true
  },
  validity: {
    type: String,
    default: 'DEC 2025'
  },
  photoUrl: {
    type: String,
    default: ''
  },
  qrCodeData: {
    type: String,
    required: true
  }
})
</script>

<style scoped>
.id-card {
  width: 85mm;
  height: 54mm;
  background: white;
  border-radius: 8px;
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
  overflow: hidden;
  font-family: Arial, sans-serif;
  position: relative;
}

.id-card-header {
  background: #1a4b8c;
  color: white;
  padding: 8px;
  display: flex;
  align-items: center;
  justify-content: space-between;
}

.logo img {
  height: 30px;
}

.org-info {
  text-align: center;
  flex-grow: 1;
}

.org-info h2 {
  font-size: 12px;
  margin: 0;
  font-weight: bold;
  text-transform: uppercase;
}

.org-info p {
  font-size: 10px;
  margin: 2px 0 0;
}

.id-card-body {
  display: flex;
  padding: 8px;
}

.photo-section {
  width: 30%;
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 8px;
}

.member-photo {
  width: 60px;
  height: 70px;
  border: 1px solid #ddd;
  overflow: hidden;
  display: flex;
  align-items: center;
  justify-content: center;
}

.member-photo img {
  width: 100%;
  height: 100%;
  object-fit: cover;
}

.qr-code {
  width: 50px;
  height: 50px;
}

.qr-code img {
  width: 100%;
  height: 100%;
}

.member-info {
  width: 70%;
  padding-left: 8px;
}

.info-row {
  display: flex;
  margin-bottom: 4px;
  font-size: 9px;
}

.info-row.address {
  align-items: flex-start;
}

.label {
  font-weight: bold;
  width: 30%;
  color: #333;
}

.value {
  width: 70%;
  color: #555;
}

.id-card-footer {
  background: #f0f0f0;
  padding: 4px 8px;
  font-size: 7px;
  text-align: center;
  border-top: 1px solid #ddd;
}

.contact-info p {
  margin: 2px 0;
}
</style>


success success model vue

<template>
  <div class="success-modal">
    <div class="modal-content">
      <div class="success-header">
        <div class="success-icon">
          <svg viewBox="0 0 24 24">
            <path fill="currentColor" d="M12 2C6.5 2 2 6.5 2 12S6.5 22 12 22 22 17.5 22 12 17.5 2 12 2M10 17L5 12L6.41 10.59L10 14.17L17.59 6.58L19 8L10 17Z" />
          </svg>
        </div>
        <h2>Application Submitted!</h2>
        <p>Your SSF membership has been successfully registered.</p>
      </div>

      <div class="membership-info">
        <p class="membership-id">
          <strong>Membership ID:</strong><br>
          {{ memberId }}
        </p>
        
        <!-- Display the membership card preview -->
        <div class="card-preview">
          <MembershipCard
            :name="name"
            :level="level"
            :course="course"
            :member-id="memberId"
            :mobile="mobile"
            :blood-group="bloodGroup"
            :address="address"
            :dob="dob"
            :validity="validity"
            :photo-url="photoUrl"
            :qr-code-data="qrCodeData"
          />
        </div>

        <p class="instructions">
          Show this QR code at SSF events for verification. You can download your digital membership card below.
        </p>
      </div>

      <div class="modal-actions">
        <button @click="downloadIDCard" class="download-btn">
          <svg viewBox="0 0 24 24">
            <path fill="currentColor" d="M5,20H19V18H5M19,9H15V3H9V9H5L12,16L19,9Z" />
          </svg>
          Download ID Card
        </button>
        <button @click="$emit('close')" class="close-btn">
          Close
        </button>
      </div>
    </div>
  </div>
</template>

<script setup>
import MembershipCard from './MembershipCard.vue'

defineProps({
  memberId: {
    type: String,
    required: true
  },
  name: {
    type: String,
    required: true
  },
  level: {
    type: String,
    default: 'MEMBER'
  },
  course: {
    type: String,
    required: true
  },
  mobile: {
    type: String,
    required: true
  },
  bloodGroup: {
    type: String,
    default: ''
  },
  address: {
    type: String,
    required: true
  },
  dob: {
    type: String,
    required: true
  },
  validity: {
    type: String,
    default: 'DEC 2025'
  },
  photoUrl: {
    type: String,
    default: ''
  },
  qrCodeData: {
    type: String,
    required: true
  }
})

const emit = defineEmits(['close', 'download'])

const downloadIDCard = () => {
  emit('download')
}
</script>

<style scoped>
.success-modal {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background-color: rgba(0, 0, 0, 0.5);
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 1000;
}

.modal-content {
  background-color: white;
  border-radius: 12px;
  width: 90%;
  max-width: 500px;
  padding: 24px;
  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15);
}

.success-header {
  text-align: center;
  margin-bottom: 20px;
}

.success-icon {
  width: 60px;
  height: 60px;
  background-color: #4CAF50;
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  margin: 0 auto 15px;
}

.success-icon svg {
  width: 36px;
  height: 36px;
  color: white;
}

.success-header h2 {
  font-size: 1.5rem;
  color: #333;
  margin-bottom: 8px;
}

.success-header p {
  color: #666;
  margin-bottom: 0;
}

.membership-info {
  margin: 20px 0;
  text-align: center;
}

.membership-id {
  background-color: #f5f5f5;
  padding: 12px;
  border-radius: 8px;
  font-size: 1.1rem;
  margin-bottom: 20px;
}

.card-preview {
  margin: 0 auto;
  transform: scale(0.8);
  transform-origin: top center;
  margin-bottom: 10px;
}

.instructions {
  color: #666;
  font-size: 0.9rem;
  margin-top: 20px;
}

.modal-actions {
  display: flex;
  flex-direction: column;
  gap: 12px;
  margin-top: 20px;
}

.download-btn, .close-btn {
  padding: 12px;
  border-radius: 8px;
  font-weight: 500;
  display: flex;
  align-items: center;
  justify-content: center;
  cursor: pointer;
  transition: all 0.2s;
}

.download-btn {
  background-color: #1a4b8c;
  color: white;
  border: none;
}

.download-btn:hover {
  background-color: #0d3a73;
}

.download-btn svg {
  width: 20px;
  height: 20px;
  margin-right: 8px;
}

.close-btn {
  background-color: white;
  color: #333;
  border: 1px solid #ddd;
}

.close-btn:hover {
  background-color: #f5f5f5;
}

@media (min-width: 768px) {
  .modal-content {
    padding: 32px;
  }
  
  .modal-actions {
    flex-direction: row;
  }
  
  .download-btn, .close-btn {
    flex: 1;
  }
}
</style>